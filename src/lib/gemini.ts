import { GoogleGenerativeAI } from "@google/generative-ai";

interface AnalysisResult {
  analysis_id: string;
  house_size_category: string;
  detected_features: string[];
  missing_features: string[];
  risk_factors: string[];
  positive_indicators: string[];
  psychological_interpretation: string;
  overall_confidence_score: number;
  processing_time_seconds: number;
  house_area_ratio: number;
  house_placement: string[];
  door_present: boolean;
  window_count: number;
  chimney_present: boolean;
  detection_confidence: Record<string, number>;
  psychological_indicators: Record<string, string[]>;
}

export interface GeminiReport {
  title: string;
  summary: string;
  detailedAnalysis: string;
  recommendations: string[];
  disclaimers: string;
}

/**
 * Generate a comprehensive psychological report using Gemini 2.5 Flash Lite
 * @param analysisResult The analysis result from the backend
 * @returns A detailed psychological report generated by Gemini
 */
export async function generateReportWithGemini(analysisResult: AnalysisResult): Promise<GeminiReport> {
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

  if (!apiKey) {
    throw new Error(
      "Gemini API key not found. Please set NEXT_PUBLIC_GEMINI_API_KEY in your environment variables."
    );
  }

  const client = new GoogleGenerativeAI(apiKey);
  const model = client.getGenerativeModel({ model: "gemini-2.5-flash-lite" });

  const detectionConfidenceSummary = Object.entries(analysisResult.detection_confidence ?? {})
    .map(([feature, score]) => `${feature}: ${(score * 100).toFixed(1)}%`)
    .join(", ") || "Not available";

  // Prepare the analysis data for Gemini
  const prompt = `You are an expert psychologist specializing in projective psychological assessments, particularly the House-Tree-Person (HTP) test. 

Analyze the following HTP test analysis results and provide a comprehensive psychological report:

**Analysis Data:**
- House Size Category: ${analysisResult.house_size_category}
- Detected Features: ${analysisResult.detected_features.join(", ") || "None"}
- Missing Features: ${analysisResult.missing_features.join(", ") || "None"}
- Positive Indicators: ${analysisResult.positive_indicators.join(", ") || "None"}
- Risk Factors / Areas for Attention: ${analysisResult.risk_factors.join(", ") || "None"}
- Analysis Confidence Score: ${(analysisResult.overall_confidence_score * 100).toFixed(1)}%
- Door Present: ${analysisResult.door_present ? "Yes" : "No"}
- Window Count: ${analysisResult.window_count}
- Chimney Present: ${analysisResult.chimney_present ? "Yes" : "No"}
- House Area Ratio: ${analysisResult.house_area_ratio.toFixed(2)}
- House Placement: ${analysisResult.house_placement.join(", ") || "Standard"}
- Detection Confidence Scores: ${detectionConfidenceSummary}
- Psychological Indicators: ${JSON.stringify(analysisResult.psychological_indicators)}

Please provide:
1. **TITLE**: A professional title for this psychological assessment
2. **EXECUTIVE SUMMARY**: A 2-3 sentence summary of key findings (2-3 sentences max)
3. **DETAILED ANALYSIS**: A comprehensive analysis written as cohesive, flowing paragraphs (NOT as JSON or structured data). Cover:
   - Interpretation of house characteristics and what they indicate about the individual
   - Analysis of structural elements (doors, windows, chimney) and their psychological significance
   - Interpretation of positive indicators and strengths
   - Analysis of risk factors and areas requiring attention
   - Overall psychological profile based on the HTP test
   
   Write this section as natural, professional prose - like you would in a formal psychological report. Use multiple paragraphs to organize your thoughts, but DO NOT use JSON format, bullet points, or structured lists here.

4. **RECOMMENDATIONS**: 3-5 specific, actionable recommendations for further assessment or support
5. **DISCLAIMERS**: Standard disclaimer about the nature of this assessment

Format your response as JSON with these exact keys: "title", "summary", "detailedAnalysis", "recommendations" (as an array), "disclaimers"

CRITICAL: The "detailedAnalysis" value must be a string containing well-written paragraphs, NOT JSON or structured data. Write it as you would in a professional psychological report.

Important: Ensure your analysis is professional, evidence-based, and appropriate for a psychological assessment context.`;

  try {
    const response = await model.generateContent(prompt);
    const text = response.response.text();

    // Extract JSON from the response
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error("Failed to parse Gemini response as JSON");
    }

    const report = JSON.parse(jsonMatch[0]) as GeminiReport;

    // Validate the response has all required fields
    if (!report.title || !report.summary || !report.detailedAnalysis || !report.recommendations || !report.disclaimers) {
      throw new Error("Gemini response missing required fields");
    }

    return report;
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(`Failed to generate report with Gemini: ${error.message}`);
    }
    throw new Error("Failed to generate report with Gemini: Unknown error");
  }
}

/**
 * Format the Gemini report for HTML display
 * @param report The Gemini report
 * @returns HTML string representation of the report
 */
export function formatReportAsHTML(report: GeminiReport): string {
  const recommendationsHTML = report.recommendations
    .map((rec) => `<li>${escapeHtml(rec)}</li>`)
    .join("");

  return `
    <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333;">
      <h1 style="color: #1f2937; border-bottom: 3px solid #f97316; padding-bottom: 10px;">${escapeHtml(
    report.title
  )}</h1>
      
      <div style="background-color: #fef3c7; border-left: 4px solid #f97316; padding: 15px; margin: 20px 0; border-radius: 4px;">
        <h2 style="color: #92400e; margin-top: 0;">Executive Summary</h2>
        <p style="margin: 0; color: #78350f;">${escapeHtml(report.summary)}</p>
      </div>
      
      <div style="margin: 30px 0;">
        <h2 style="color: #1f2937; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px;">Detailed Analysis</h2>
        <div style="background-color: #f9fafb; padding: 15px; border-radius: 4px;">
          ${formatDetailedAnalysisHTML(report.detailedAnalysis)}
        </div>
      </div>
      
      <div style="margin: 30px 0;">
        <h2 style="color: #1f2937; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px;">Recommendations</h2>
        <ul style="background-color: #f0fdf4; padding: 20px 40px; border-radius: 4px; border-left: 4px solid #22c55e;">
          ${recommendationsHTML}
        </ul>
      </div>
      
      <div style="background-color: #f3f4f6; padding: 15px; margin-top: 30px; border-radius: 4px; border: 1px solid #d1d5db;">
        <h3 style="color: #4b5563; margin-top: 0;">Disclaimers & Important Notes</h3>
        <p style="font-size: 0.9em; color: #6b7280; margin: 0;">${escapeHtml(report.disclaimers)}</p>
      </div>
    </div>
  `;
}

/**
 * Format detailed analysis for HTML - handles both string and object formats
 */
function formatDetailedAnalysisHTML(detailedAnalysis: string | unknown): string {
  let text: string;

  // If it's an object, try to extract meaningful text
  if (typeof detailedAnalysis === 'object' && detailedAnalysis !== null) {
    const obj = detailedAnalysis as Record<string, unknown>;

    // If it has a text or content property, use that
    if ('text' in obj && typeof obj.text === 'string') {
      text = obj.text;
    } else if ('content' in obj && typeof obj.content === 'string') {
      text = obj.content;
    } else {
      // Otherwise convert object to JSON string for debugging
      text = JSON.stringify(detailedAnalysis, null, 2);
    }
  } else {
    // Convert to string (handles string, number, boolean, etc.)
    text = String(detailedAnalysis || '');
  }

  return text
    .split("\n")
    .filter((line) => line.trim())
    .map((line) => `<p>${escapeHtml(line)}</p>`)
    .join("");
}

/**
 * Escape HTML special characters
 * @param text Text to escape
 * @returns Escaped text
 */
function escapeHtml(text: string | unknown): string {
  // Ensure text is a string
  const str = String(text || '');

  const div = document.createElement("div");
  div.textContent = str;
  return div.innerHTML;
}
